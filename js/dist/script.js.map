{"version":3,"sources":["script.js"],"names":["document","addEventListener","btns","querySelectorAll","modal","querySelector","i","length","hasAttribute","removeAttribute","launchModal","setAttribute","modalTitleElem","modalTitle","innerText","btnText","classList","contains","add","btnTextLower","toLowerCase","modalDescElem","modalDesc","btnDesc","getAttribute","innerHTML","themeSelector","getElementById","labels","exitModal","remove","setTimeout","closeButton","e","keyCode","labelElem1","labelElem2","dataLabel1","dataLabel2"],"mappings":"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","file":"script.js","sourcesContent":["// Wait till the DOM is ready, then fire stuff\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Begin regular document stuff (UI and functions)\n\n  // Define constants for [data-localstorage] buttons and modal\n  const btns = document.querySelectorAll('.edit > button');\n  const modal = document.querySelector('.edit__modal');\n\n  // Before doing anything, check first if [data-localstorage] buttons have\n  // a `disabled` attribute, then remove it. This prevents the buttons from\n  // having a `disabled` attribute when the page is reloaded, therefore making\n  // the buttons inaccessible.\n  for (let i = 0; i < btns.length; i++) {\n    if (true === btns[i].hasAttribute('disabled'))\n      btns[i].removeAttribute('disabled');\n  }\n\n  // Begin loop for [data-localstorage] buttons\n  for (let i = 0; i < btns.length; i++) {\n    // Function to launch the edit modal and + some other stuff\n    function launchModal() {\n      // Set a `disabled` attribute on all the [data-localstorage] buttons\n      // when each button is clicked to launch the edit modal, to avoid\n      // multiple clicks resulting to modal errors.\n      for (let i = 0; i < btns.length; i++) {\n        btns[i].setAttribute('disabled', '');\n      }\n\n      // Define variables to set modal title based on the innerText of the button clicked\n      let modalTitleElem = document.querySelector('.edit__modal > h3');\n      let modalTitle = modalTitleElem.innerText;\n      let btnText = btns[i].innerText;\n\n      // If the modal does not have a `visible` class, add a `visible` class\n      if (false === modal.classList.contains('visible'))\n        modal.classList.add('visible');\n\n      // Add an `id` to the modal based on the button clicked\n      let btnTextLower = btnText.toLowerCase();\n\n      modal.setAttribute('id', `${btnTextLower}_edit`);\n\n      // Set modal title based on the innerText of the button clicked\n      modalTitleElem.innerText = `Edit ${btnText}`;\n\n      // Define variables to set modal description based on the [data-desc] of the button clicked\n      let modalDescElem = document.querySelector('.edit__modal > .edit_text');\n      let modalDesc = modalDescElem.innerText;\n      let btnDesc = btns[i].getAttribute('data-desc');\n\n      // Set modal description based on the innerText of the button clicked\n      modalDescElem.innerHTML = `${btnDesc}`;\n\n      // Get the theme selector functions\n      // Define essential variables for the theme selector\n      let themeSelector = document.getElementById('theme_selector');\n      let labels = document.querySelectorAll('#theme_selector > label > input');\n\n      for (let i = 0; i < labels.length; i++) {\n        labels[i].addEventListener('click', () => {\n          while (labels[i].hasAttribute('checked')) {\n            labels[i].removeAttribute('checked');\n          }\n\n        }, false);\n      }\n\n      // Define function to exit the modal\n      function exitModal() {\n        // If the modal has a `visible` class, remove it\n        if (true === modal.classList.contains('visible'))\n          modal.classList.remove('visible');\n\n        for (let i = 0; i < btns.length; i++) {\n          // If the buttons have a `disabled` attribute, remove it\n          if (true === btns[i].hasAttribute('disabled'))\n            btns[i].removeAttribute('disabled');\n        }\n\n        // Reset the modal title to `Edit` if it already has a title inherited\n        // from the button clicked within a timeout of .120 seconds\n        if ('Edit' !== modalTitleElem.innerText) {\n          setTimeout(() => {\n            modalTitleElem.innerText = 'Edit';\n          }, 120);\n        }\n\n        // Reset the modal description to an empty string if it already has a\n        // description inherited from the [data-desc] attr of the button clicked\n        // within a timeout of .120 seconds\n        if ('' !== modalDescElem.innerHTML) {\n          setTimeout(() => {\n            modalDescElem.innerHTML = '';\n          }, 120);\n        }\n\n        // If the modal has an `id` attribute, remove it within a timeout of .120 seconds\n        if (true === modal.hasAttribute('id')) {\n          setTimeout(() => {\n            modal.removeAttribute('id');\n          }, 120);\n        }\n\n      }\n\n      // Get the close button\n      let closeButton = document.getElementById('close_modal');\n\n      // Function to close the edit modal when the close button is clicked\n      closeButton.addEventListener('click', () => {\n        exitModal();\n      }, false);\n\n      // Add a keydown event listener to the document to detect\n      // when `esc` key is clicked, then exit the modal\n      document.addEventListener('keydown', e => {\n        if (modal.classList.contains('visible')) {\n          if (27 === e.keyCode)\n            exitModal();\n        }\n      }, false);\n\n    }\n\n    // Add a `click` event listener to all [data-localstorage] buttons and do some stuff\n    btns[i].addEventListener('click', () => {\n      launchModal();\n\n      // Get all elements need to set the label for the inputs\n      // Get the label elements\n      let labelElem1 = document.querySelector('label[for=\"input1\"]');\n      let labelElem2 = document.querySelector('label[for=\"input2\"]');\n\n      // Get the [data-label-1, data-label-2] attributes of each button\n      let dataLabel1 = btns[i].getAttribute('data-label-1');\n      let dataLabel2 = (btns[i].hasAttribute('data-label-2')) ? btns[i].getAttribute('data-label-2') : '';\n\n      // Set the innerText of the label element based on the [dataLabel1, dataLabel2] attributes of the buttons\n      labelElem1.innerText = dataLabel1;\n      labelElem2.innerText = dataLabel2;\n\n    }, false);\n\n  }\n}, false);\n"],"sourceRoot":"/source/"}